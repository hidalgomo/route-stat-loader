(()=>{"use strict";class e{executables=[];constructor(t){if(this.constructor===e)throw new Error("Abstract class cannot be instantiated.");Object.defineProperty(this,"element",{value:t,writable:!1})}}class t extends e{constructor(e){if(super(e),this.constructor===t)throw new Error("Abstract class cannot be instantiated.")}_show(){this.element.classList.remove("display-none")}_hide(){this.element.classList.add("display-none")}}const s=new class extends t{constructor(){super(document.querySelector(".modal-bg")),this.element&&this.element.addEventListener("click",(()=>this.hide()))}init(e){this.executables=[...e]}show(){this._show()}hide(){this._hide(),this.executables.map((e=>e()))}};class r extends e{constructor(e){if(super(e),this.constructor===r)throw new Error("Abstract class cannot be instantiated.")}_show(e){this.element.style.width=e}_hide(){this.element.style.width=0}}const o=new class extends r{constructor(){super(document.querySelector(".route-detail-container"))}show(){this._show("70%")}hide(){this._hide()}};o.selectedRoute=new class extends e{constructor(){super(document.querySelector(".selected-route-label"))}},o.closeBtn=new class extends e{constructor(){super(document.getElementById("closeRouteDetailBtn")),this.element&&this.element.addEventListener("click",(()=>this.executables.map((e=>e()))))}init(e){this.executables=[...e]}};const n={MB:{name:"Manhattan-Bronx",orderNum:1},BQ:{name:"Brooklyn-Queens",orderNum:2},SI:{name:"Staten Island",orderNum:3}},a={BQ_99_RH_H101:"Belt Parkway",MB_99_RH_H101:"Bronx River Parkway",BQ_99_RH_H102:"Brooklyn Queens Expressway",MB_99_RH_H102:"Bruckner Expressway",BQ_99_RH_H103:"Clearview Expressway",MB_99_RH_H103:"Cross Bronx Expressway",BQ_99_RH_H104:"Cross Island Parkway",SI_99_RH_H101:"Dr M L King Jr Expressway",MB_99_RH_H104:"Franklin D Roosevelt Drive",BQ_99_RH_H105:"Gowanus Expressway",BQ_99_RH_H106:"Grand Central Parkway",MB_99_RH_H105:"Harlem River Drive",MB_99_RH_H106:"Henry Hudson Parkway",MB_99_RH_H107:"Hutchinson River Parkway",BQ_99_RH_H107:"Jackie Robinson Parkway",SI_99_RH_H102:"Korean War Vets Parkway",BQ_99_RH_H108:"Long Island Expressway",MB_99_RH_H108:"Major Deegan Expressway",MB_99_RH_H109:"Mosholu Parkway",BQ_99_RH_H109:"Nassau Expressway",MB_99_RH_H110:"Pelham Parkway",BQ_99_RH_H110:"Prospect Expressway",MB_99_RH_H111:"Sheridan Boulevard",SI_99_RH_H103:"Staten Island Expressway",BQ_99_RH_H111:"Van Wyck Expressway",SI_99_RH_H104:"West Shore Expressway"},i=new class{constructor(e){Object.assign(this,e)}create(e,t){return new this[e](t)}}({Route:function(e){Object.assign(this,e),this.fullName=a[this.route_name],this.template=(e="fullName",t="pctcomp_combined")=>`\n            <div class="route" id="${this.route_name}" title="${this[e]}">\n                <div class="route-label">${this[e]}</div>\n                <div class="outer-progress-bar">\n                    <div class="inner-progress-bar ${(e=>{const t=Math.abs(100*e);return t<50?"red-bg":t>=50&&t<70?"yellow-bg":t>=70&&t<80?"light-green-bg":t>=80&&t<90?"mid-green-bg":"dark-green-bg"})(this[t])}"></div>\n                    <div class="progress-percent">${(100*this[t]).toFixed(1)}%</div>\n                </div>\n            </div>`},Borough:function(e){this.shortName=e,this.fullName=n[e]&&n[e].name,this.routes=[],this.template=()=>{let e="";for(let t of this.routes)e+=t.template();return`\n            <div class="borough">\n                <div class="borough-label">\n                    <div>${this.fullName&&this.fullName.toLowerCase()}</div>\n                </div>\n                <div class="route-container">${e}</div>\n            </div>`}}}),u=new class{#e;#t=[];#s=[];#r(e){return[...new Set(e.map((e=>e.borough)))]}#o(e){return e.map((e=>this.#e.create("Borough",e)))}#n(e){return e.map((e=>this.#e.create("Route",e)))}constructor(e){this.#e=e}load(e){this.#t=this.#o(this.#r(e.routes)),this.#s=this.#n(e.routes)}sortByOrderNum(){this.#t=this.#t.sort(((e,t)=>n[e.shortName]&&n[t.shortName]&&n[e.shortName].orderNum<n[t.shortName].orderNum?-1:1))}getBoroughsWithUniqueRoutes(){const e=[],t=new Set;for(let s of this.#s)t.has(s.route_name)||(e.push(s),t.add(s.route_name));for(let t of this.#t)t.routes=e.filter((e=>t.shortName===e.borough));return this.#t}getRoutesByName(e){return this.#s.filter((t=>t.route_name===e))}}(i),c=new class{#a;#i;constructor(){}init(e,t){return this.#a=document.querySelector(e),this.#i=t,this}async render(e){return this.#a.innerHTML="",await new Promise(((t,s)=>{for(let t of this.#i)this.#a.innerHTML+=e(t);setTimeout((()=>t()),100)}))}afterRender(e){let t,s;for(let r of this.#a.getElementsByClassName("route"))e&&r&&r.addEventListener("click",(function(){e(this)})),s=r.querySelector(".progress-percent").innerHTML,t=r.querySelector(".inner-progress-bar"),t.style.width=s}},l=new class{constructor(){}getParameters(){return`?${window.location.hash.substring(1)}`}async getAsync(e){return await fetch(e).then((e=>e.json()))}},h=new class{constructor(){}run(e){window.onload=()=>{e()}}};s.init([()=>o.hide()]),o.closeBtn.init([()=>s.hide(),()=>o.hide()]),h.run((()=>{const e="./assets/json_dataset.json"+l.getParameters();l.getAsync(e).then((e=>{u.load(e),u.sortByOrderNum();const t=u.getBoroughsWithUniqueRoutes();c.init(".borough-container",t).render((e=>e.template())).then((()=>{c.afterRender((e=>{const t=u.getRoutesByName(e.id);c.init(".route-detail",t).render((e=>e.template("equipment_id","pctcomp_specific"))).then((()=>{c.afterRender(),o.selectedRoute.element.textContent=t[0].fullName,o.show(),s.show()}))}))}))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUN0QnNELFFBQU94QixHQUFPQSxFQUFJMUMsU0FBUyxlQUFnQixzQkFDM0N3RCxNQUFLLEtBQ0Z2QixFQUFTVyxjQUNUM0YsRUFBYUMsY0FBYzNCLFFBQVE4SSxZQUFjekQsRUFBTyxHQUFHZCxTQUMzRDdDLEVBQWFOLE9BQ2JOLEVBQVFNLE1BQU0sR0FDcEIsR0FDUixHQUNSLEdBQ0osRyIsInNvdXJjZXMiOlsid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9jb3JlL2FydGlmYWN0LmpzIiwid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9jb3JlL2Rpc3BsYXllci5qcyIsIndlYnBhY2s6Ly9yb3V0ZS1zdGF0LWxvYWRlci8uL3NyYy9hcHAvbW9kYWwtYmcvbW9kYWwtYmcuanMiLCJ3ZWJwYWNrOi8vcm91dGUtc3RhdC1sb2FkZXIvLi9zcmMvYXBwL2NvcmUvc2xpZGVyLmpzIiwid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9yb3V0ZS1kZXRhaWxzL3JvdXRlLWRldGFpbHMuanMiLCJ3ZWJwYWNrOi8vcm91dGUtc3RhdC1sb2FkZXIvLi9zcmMvYXBwL2NvcmUvbWFwcGluZ3MuanMiLCJ3ZWJwYWNrOi8vcm91dGUtc3RhdC1sb2FkZXIvLi9zcmMvYXBwL2NvcmUvZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9yb3V0ZS1zdGF0LWxvYWRlci8uL3NyYy9hcHAvY29yZS9yb3V0ZS5qcyIsIndlYnBhY2s6Ly9yb3V0ZS1zdGF0LWxvYWRlci8uL3NyYy9hcHAvY29yZS9ib3JvdWdoLmpzIiwid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9jb3JlL3N0b3JlLmpzIiwid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9jb3JlL3JlbmRlcmVyLmpzIiwid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9jb3JlL2h0dHBIYW5kbGVyLmpzIiwid2VicGFjazovL3JvdXRlLXN0YXQtbG9hZGVyLy4vc3JjL2FwcC9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIEFydGlmYWN0IGNsYXNzIGlzIGEgbm9uLWluc3RhbnRpYWJsZSAoYWJzdHJhY3QpIGNsYXNzIHRoYXQgcHJvdmlkZXMgbWluaW1hbCByZXVzYWJpbGl0eSBmb3JcbiAqIHRoZSBwYXJhbWV0ZXJzIHBhc3NlZCB2aWEgdGhlwqBleHRlbmRlZCBjb25zdHJ1Y3Rvci5cbiAqL1xuIGV4cG9ydCBjbGFzcyBBcnRpZmFjdCB7XG5cbiAgICBleGVjdXRhYmxlcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHtbRWxlbWVudF19IGVsZW1lbnQgc3RvcmVzIGEgRE9NIGVsZW1lbnQgZm9yIHN1Yi1jbGFzc2VzIHRvIHV0aWxpemUuIFRoaXMgcHJvcGVydHlcbiAgICAgKiBjYW5ub3QgYmUgbW9kaWZpZWQgb25jZSBpdCBpcyBzZXQgKG5vbi13cml0YWJsZSkuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQXJ0aWZhY3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQWJzdHJhY3QgY2xhc3MgY2Fubm90IGJlIGluc3RhbnRpYXRlZC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZWxlbWVudCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiBlbGVtZW50LFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBBcnRpZmFjdCB9IGZyb20gXCIuL2FydGlmYWN0XCI7XG4vKipcbiAqIFRoZSBEaXNwbGF5ZXIgY2xhc3MgaXMgdW5pbnN0YXRpYWJsZSAoYWJzdHJhY3QpIGNsYXNzIHRoYXQgcHJvdmlkZXMgcmV1c2FiaWxpdHkgdG8gc3ViLWNsYXNzZXMgd2hvc2UgZm9jdXNcbiAqIGlzIGVpdGhlciBoaWRpbmcgKHNldCBkaXNwbGF5IHRvIG5vbmUpIG9yIHNob3dpbmcgdGhlIHNwZWNpZmllZCBIVE1MIGVsZW1lbnQuXG4gKi9cbiBleHBvcnQgY2xhc3MgRGlzcGxheWVyIGV4dGVuZHMgQXJ0aWZhY3Qge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHsgW0VsZW1lbnRdIH0gZWxlbWVudCBzdG9yZXMgRE9NIGVsZW1lbnQgdGhhdCB3aWxsIGVpdGhlciBiZSBoaWRkZW4gb3Igc2hvd24uXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICBzdXBlcihlbGVtZW50KTtcblxuICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gRGlzcGxheWVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fic3RyYWN0IGNsYXNzIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWQuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGkgbWV0aG9kIHBlcmZvcm1zIGEgY2xhc3MgcmVtb3ZhbCBvZiB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuIFRoZSBtZXRob2QgcmVtb3Zlc1xuICAgICAqIGEgY2xhc3MgbmFtZSB0aGF0IGhvbGRzIHN0eWxlcyBzdWNoIGFzIGRpc3BsYXkgbm9uZSBpbiBvcmRlciB0byBoaWRlIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIF9zaG93KCkgeyBcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc3BsYXktbm9uZScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHBlcmZvcm1zIGEgY2xhc3MgYWRkaXRpb24gb2YgdGhlIHNwZWNpZmllZCBlbGVtZW50LiBUaGUgbWV0aG9kIGFkZHNcbiAgICAgKiBhIGNsYXNzIG5hbWUgdGhhdCBob2xkcyBzdHlsZXMgc3VjaCBhcyBkaXNwbGF5IG5vbmUgaW4gb3JkZXIgdG8gaGlkZSB0aGUgZWxlbWVudC5cbiAgICAgKi9cbiAgICBfaGlkZSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2Rpc3BsYXktbm9uZScpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEaXNwbGF5ZXIgfSBmcm9tICcuLi9jb3JlL2Rpc3BsYXllcic7XG5cbmNsYXNzIE1vZGFsQmcgZXh0ZW5kcyBEaXNwbGF5ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtYmcnKSk7XG4gICAgICAgIHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmhpZGUoKSk7XG4gICAgfVxuXG4gICAgaW5pdChleGVjdXRhYmxlcykge1xuICAgICAgICB0aGlzLmV4ZWN1dGFibGVzID0gWy4uLmV4ZWN1dGFibGVzXTtcbiAgICB9XG5cbiAgICBzaG93KCkge1xuICAgICAgICB0aGlzLl9zaG93KCk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5faGlkZSgpO1xuICAgICAgICB0aGlzLmV4ZWN1dGFibGVzLm1hcCh4ID0+IHgoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgbW9kYWxCZyA9IG5ldyBNb2RhbEJnKCk7XG4iLCJpbXBvcnQgeyBBcnRpZmFjdCB9IGZyb20gXCIuL2FydGlmYWN0XCI7XG5cbmV4cG9ydCBjbGFzcyBTbGlkZXIgZXh0ZW5kcyBBcnRpZmFjdCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICBzdXBlcihlbGVtZW50KTtcblxuICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gU2xpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fic3RyYWN0IGNsYXNzIGNhbm5vdCBiZSBpbnN0YW50aWF0ZWQuJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2hvdyh3aWR0aCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICB9XG5cbiAgICBfaGlkZSgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLndpZHRoID0gMDtcbiAgICB9XG59IiwiaW1wb3J0IHsgQXJ0aWZhY3QgfSBmcm9tICcuLi9jb3JlL2FydGlmYWN0JztcbmltcG9ydCB7IFNsaWRlciB9IGZyb20gJy4uL2NvcmUvc2xpZGVyJztcblxuY2xhc3MgUm91dGVEZXRhaWxzIGV4dGVuZHMgU2xpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJvdXRlLWRldGFpbC1jb250YWluZXInKSk7XG4gICAgfVxuXG4gICAgc2hvdygpIHtcbiAgICAgICAgdGhpcy5fc2hvdygnNzAlJyk7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5faGlkZSgpO1xuICAgIH1cbn1cblxuY2xhc3MgU2VsZWN0ZWRSb3V0ZSBleHRlbmRzIEFydGlmYWN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdGVkLXJvdXRlLWxhYmVsJykpO1xuICAgIH1cbn1cblxuY2xhc3MgQ2xvc2VCdG4gZXh0ZW5kcyBBcnRpZmFjdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbG9zZVJvdXRlRGV0YWlsQnRuJykpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgJiYgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5leGVjdXRhYmxlcy5tYXAoeCA9PiB4KCkpKTtcbiAgICB9XG5cbiAgICBpbml0KGV4ZWN1dGFibGVzKSB7XG4gICAgICAgIHRoaXMuZXhlY3V0YWJsZXMgPSBbLi4uZXhlY3V0YWJsZXNdO1xuICAgIH1cbn1cblxuY29uc3Qgcm91dGVEZXRhaWxzID0gbmV3IFJvdXRlRGV0YWlscygpO1xucm91dGVEZXRhaWxzLnNlbGVjdGVkUm91dGUgPSBuZXcgU2VsZWN0ZWRSb3V0ZSgpO1xucm91dGVEZXRhaWxzLmNsb3NlQnRuID0gbmV3IENsb3NlQnRuKCk7XG5cbmV4cG9ydCB7IHJvdXRlRGV0YWlscyB9OyIsImV4cG9ydCBjb25zdCBib3JvdWdoTWFwcGluZyA9IHtcbiAgICBNQjogeyBuYW1lOiAnTWFuaGF0dGFuLUJyb254Jywgb3JkZXJOdW06IDEgfSxcbiAgICBCUTogeyBuYW1lOiAnQnJvb2tseW4tUXVlZW5zJywgb3JkZXJOdW06IDIgfSxcbiAgICBTSTogeyBuYW1lOiAnU3RhdGVuIElzbGFuZCcsIG9yZGVyTnVtOiAzIH1cbn07XG5cbmV4cG9ydCBjb25zdCByb3V0ZU1hcHBpbmcgPSB7XG4gICAgQlFfOTlfUkhfSDEwMTogJ0JlbHQgUGFya3dheScsXG4gICAgTUJfOTlfUkhfSDEwMTogJ0Jyb254IFJpdmVyIFBhcmt3YXknLFxuICAgIEJRXzk5X1JIX0gxMDI6ICdCcm9va2x5biBRdWVlbnMgRXhwcmVzc3dheScsXG4gICAgTUJfOTlfUkhfSDEwMjogJ0JydWNrbmVyIEV4cHJlc3N3YXknLFxuICAgIEJRXzk5X1JIX0gxMDM6ICdDbGVhcnZpZXcgRXhwcmVzc3dheScsXG4gICAgTUJfOTlfUkhfSDEwMzogJ0Nyb3NzIEJyb254IEV4cHJlc3N3YXknLFxuICAgIEJRXzk5X1JIX0gxMDQ6ICdDcm9zcyBJc2xhbmQgUGFya3dheScsXG4gICAgU0lfOTlfUkhfSDEwMTogJ0RyIE0gTCBLaW5nIEpyIEV4cHJlc3N3YXknLFxuICAgIE1CXzk5X1JIX0gxMDQ6ICdGcmFua2xpbiBEIFJvb3NldmVsdCBEcml2ZScsXG4gICAgQlFfOTlfUkhfSDEwNTogJ0dvd2FudXMgRXhwcmVzc3dheScsXG4gICAgQlFfOTlfUkhfSDEwNjogJ0dyYW5kIENlbnRyYWwgUGFya3dheScsXG4gICAgTUJfOTlfUkhfSDEwNTogJ0hhcmxlbSBSaXZlciBEcml2ZScsXG4gICAgTUJfOTlfUkhfSDEwNjogJ0hlbnJ5IEh1ZHNvbiBQYXJrd2F5JyxcbiAgICBNQl85OV9SSF9IMTA3OiAnSHV0Y2hpbnNvbiBSaXZlciBQYXJrd2F5JyxcbiAgICBCUV85OV9SSF9IMTA3OiAnSmFja2llIFJvYmluc29uIFBhcmt3YXknLFxuICAgIFNJXzk5X1JIX0gxMDI6ICdLb3JlYW4gV2FyIFZldHMgUGFya3dheScsXG4gICAgQlFfOTlfUkhfSDEwODogJ0xvbmcgSXNsYW5kIEV4cHJlc3N3YXknLFxuICAgIE1CXzk5X1JIX0gxMDg6ICdNYWpvciBEZWVnYW4gRXhwcmVzc3dheScsXG4gICAgTUJfOTlfUkhfSDEwOTogJ01vc2hvbHUgUGFya3dheScsXG4gICAgQlFfOTlfUkhfSDEwOTogJ05hc3NhdSBFeHByZXNzd2F5JyxcbiAgICBNQl85OV9SSF9IMTEwOiAnUGVsaGFtIFBhcmt3YXknLFxuICAgIEJRXzk5X1JIX0gxMTA6ICdQcm9zcGVjdCBFeHByZXNzd2F5JyxcbiAgICBNQl85OV9SSF9IMTExOiAnU2hlcmlkYW4gQm91bGV2YXJkJyxcbiAgICBTSV85OV9SSF9IMTAzOiAnU3RhdGVuIElzbGFuZCBFeHByZXNzd2F5JyxcbiAgICBCUV85OV9SSF9IMTExOiAnVmFuIFd5Y2sgRXhwcmVzc3dheScsXG4gICAgU0lfOTlfUkhfSDEwNDogJ1dlc3QgU2hvcmUgRXhwcmVzc3dheSdcbn07IiwiaW1wb3J0IHsgUm91dGUgfSBmcm9tIFwiLi9yb3V0ZVwiO1xuaW1wb3J0IHsgQm9yb3VnaCB9IGZyb20gXCIuL2Jvcm91Z2hcIjtcblxuY2xhc3MgRmFjdG9yeSB7XG5cbiAgICBjb25zdHJ1Y3RvcihjbGFzc2VzT2JqKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2xhc3Nlc09iaik7XG4gICAgfVxuXG4gICAgY3JlYXRlKGNsYXNzTmFtZSwgcGFyYW1ldGVycykge1xuICAgICAgICAvLyBUaGVyZSBpcyBtaW5vciBwb2xsdXRpb24gb2YgdGhlIGdsb2JhbCBzY29wZSByZWdhcmRpbmcgdGhlIGJlbG93IGNvZGUuXG4gICAgICAgIC8vIEEgbmFtZXNwYWNlIGlzIG5lZWRlZCB0byBhdm9pZCBwb2xsdXRpbmcgdGhlIGdsb2JhbCBzY29wZSBhbmQgcG9zc2libGUgY29kZSByZS1zdHJ1Y3R1cmluZy5cbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzW2NsYXNzTmFtZV0ocGFyYW1ldGVycyk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZmFjdG9yeSA9IG5ldyBGYWN0b3J5KHtcbiAgICBSb3V0ZSxcbiAgICBCb3JvdWdoXG59KTs7IiwiaW1wb3J0IHsgcm91dGVNYXBwaW5nIH0gZnJvbSBcIi4vbWFwcGluZ3NcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlKHJvdXRlKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCByb3V0ZSk7XG4gICAgdGhpcy5mdWxsTmFtZSA9IHJvdXRlTWFwcGluZ1t0aGlzLnJvdXRlX25hbWVdO1xuXG4gICAgdmFyIGV2YWxDbGFzcyA9IChwZXJjZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGNQZXJjZW50ID0gIE1hdGguYWJzKHBlcmNlbnQgKiAxMDApO1xuXG4gICAgICAgIGlmIChjYWxjUGVyY2VudCA8IDUwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3JlZC1iZyc7XG4gICAgICAgIH0gZWxzZSBpZiAoY2FsY1BlcmNlbnQgPj0gNTAgJiYgY2FsY1BlcmNlbnQgPCA3MCkge1xuICAgICAgICAgICAgcmV0dXJuICd5ZWxsb3ctYmcnO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbGNQZXJjZW50ID49IDcwICYmIGNhbGNQZXJjZW50IDwgODApIHtcbiAgICAgICAgICAgIHJldHVybiAnbGlnaHQtZ3JlZW4tYmcnO1xuICAgICAgICB9IGVsc2UgaWYgKGNhbGNQZXJjZW50ID49IDgwICYmIGNhbGNQZXJjZW50IDwgOTApIHtcbiAgICAgICAgICAgIHJldHVybiAnbWlkLWdyZWVuLWJnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnZGFyay1ncmVlbi1iZyc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRlbXBsYXRlID0gKGxhYmVsUHJvcE5hbWUgPSAnZnVsbE5hbWUnLCBwZXJjZW50UHJvcE5hbWUgPSAncGN0Y29tcF9jb21iaW5lZCcpID0+IHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3V0ZVwiIGlkPVwiJHsgdGhpcy5yb3V0ZV9uYW1lIH1cIiB0aXRsZT1cIiR7IHRoaXNbbGFiZWxQcm9wTmFtZV0gfVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3V0ZS1sYWJlbFwiPiR7IHRoaXNbbGFiZWxQcm9wTmFtZV0gfTwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJvdXRlci1wcm9ncmVzcy1iYXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlubmVyLXByb2dyZXNzLWJhciAkeyBldmFsQ2xhc3ModGhpc1twZXJjZW50UHJvcE5hbWVdKSB9XCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1wZXJjZW50XCI+JHsgKHRoaXNbcGVyY2VudFByb3BOYW1lXSAqIDEwMCkudG9GaXhlZCgxKSB9JTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YDtcbiAgICB9XG59IiwiaW1wb3J0IHsgYm9yb3VnaE1hcHBpbmcgfSBmcm9tIFwiLi9tYXBwaW5nc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gQm9yb3VnaChib3JvdWdoU2hvcnROYW1lKSB7XG4gICAgdGhpcy5zaG9ydE5hbWUgPSBib3JvdWdoU2hvcnROYW1lO1xuICAgIHRoaXMuZnVsbE5hbWUgPSBib3JvdWdoTWFwcGluZ1tib3JvdWdoU2hvcnROYW1lXSAmJiBib3JvdWdoTWFwcGluZ1tib3JvdWdoU2hvcnROYW1lXS5uYW1lO1xuICAgIHRoaXMucm91dGVzID0gW107XG5cbiAgICB0aGlzLnRlbXBsYXRlID0gKCkgPT4ge1xuICAgICAgICBsZXQgcm91dGVIdG1sID0gJyc7XG4gICAgICAgIGZvciAobGV0IHJvdXRlIG9mIHRoaXMucm91dGVzKSB7XG4gICAgICAgICAgICByb3V0ZUh0bWwgKz0gcm91dGUudGVtcGxhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYm9yb3VnaFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJib3JvdWdoLWxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXY+JHsgdGhpcy5mdWxsTmFtZSAmJiB0aGlzLmZ1bGxOYW1lLnRvTG93ZXJDYXNlKCkgfTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3V0ZS1jb250YWluZXJcIj4keyByb3V0ZUh0bWwgfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YDtcbiAgICB9XG59IiwiaW1wb3J0IHsgYm9yb3VnaE1hcHBpbmcgfSBmcm9tICcuL21hcHBpbmdzJztcbmltcG9ydCB7IGZhY3RvcnkgfSBmcm9tICcuL2ZhY3RvcnknO1xuXG5jbGFzcyBTdG9yZSB7XG4gICAgI2ZhY3Rvcnk7XG4gICAgI2Jvcm91Z2hzID0gW107XG4gICAgI3JvdXRlcyA9IFtdO1xuXG4gICAgI2V4dHJhY3RVbmlxdWVCb3JvdWdoTmFtZXNGcm9tUm91dGVzKHJvdXRlcykge1xuICAgICAgICByZXR1cm4gWy4uLm5ldyBTZXQocm91dGVzLm1hcCh4ID0+IHguYm9yb3VnaCkpXTtcbiAgICB9XG5cbiAgICAjbG9hZEJvcm91Z2hzKHVuaXF1ZUJvcm91Z2hOYW1lcykge1xuICAgICAgICByZXR1cm4gdW5pcXVlQm9yb3VnaE5hbWVzLm1hcChib3JvdWdoU2hvcnROYW1lID0+IHRoaXMuI2ZhY3RvcnkuY3JlYXRlKCdCb3JvdWdoJywgYm9yb3VnaFNob3J0TmFtZSkpO1xuICAgIH1cblxuICAgICNsb2FkUm91dGVzKHJvdXRlcykge1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlcy5tYXAocm91dGUgPT4gdGhpcy4jZmFjdG9yeS5jcmVhdGUoJ1JvdXRlJywgcm91dGUpKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihmYWN0b3J5KSB7XG4gICAgICAgIHRoaXMuI2ZhY3RvcnkgPSBmYWN0b3J5O1xuICAgIH1cblxuICAgIGxvYWQoZGF0YSkge1xuICAgICAgICB0aGlzLiNib3JvdWdocyA9IHRoaXMuI2xvYWRCb3JvdWdocyh0aGlzLiNleHRyYWN0VW5pcXVlQm9yb3VnaE5hbWVzRnJvbVJvdXRlcyhkYXRhLnJvdXRlcykpO1xuICAgICAgICB0aGlzLiNyb3V0ZXMgPSB0aGlzLiNsb2FkUm91dGVzKGRhdGEucm91dGVzKTtcbiAgICB9XG5cbiAgICBzb3J0QnlPcmRlck51bSgpIHtcbiAgICAgICAgdGhpcy4jYm9yb3VnaHMgPSB0aGlzLiNib3JvdWdocy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWJvcm91Z2hNYXBwaW5nW2Euc2hvcnROYW1lXSB8fCAhYm9yb3VnaE1hcHBpbmdbYi5zaG9ydE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBib3JvdWdoTWFwcGluZ1thLnNob3J0TmFtZV0ub3JkZXJOdW0gPCBib3JvdWdoTWFwcGluZ1tiLnNob3J0TmFtZV0ub3JkZXJOdW0/IC0xIDogMTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0Qm9yb3VnaHNXaXRoVW5pcXVlUm91dGVzKCkge1xuICAgICAgICBjb25zdCB1bmlxdWVSb3V0ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgdW5pcXVlUm91dGVOYW1lcyA9IG5ldyBTZXQoKTtcblxuICAgICAgICBmb3IobGV0IHJvdXRlIG9mIHRoaXMuI3JvdXRlcykge1xuICAgICAgICAgICAgaWYgKHVuaXF1ZVJvdXRlTmFtZXMuaGFzKHJvdXRlLnJvdXRlX25hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVuaXF1ZVJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgICAgICAgICAgIHVuaXF1ZVJvdXRlTmFtZXMuYWRkKHJvdXRlLnJvdXRlX25hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgYm9yb3VnaCBvZiB0aGlzLiNib3JvdWdocykge1xuICAgICAgICAgICAgYm9yb3VnaC5yb3V0ZXMgPSB1bmlxdWVSb3V0ZXMuZmlsdGVyKHggPT4gYm9yb3VnaC5zaG9ydE5hbWUgPT09IHguYm9yb3VnaCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy4jYm9yb3VnaHM7XG4gICAgfVxuXG4gICAgZ2V0Um91dGVzQnlOYW1lKHJvdXRlTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy4jcm91dGVzLmZpbHRlcih4ID0+IHgucm91dGVfbmFtZSA9PT0gcm91dGVOYW1lKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBzdG9yZSA9IG5ldyBTdG9yZShmYWN0b3J5KTsiLCJjbGFzcyBSZW5kZXJlciB7XG4gICAgI3Jvb3RFbGVtO1xuICAgICNkYXRhU2V0O1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIGluaXQocGFyZW50SWRlbnRpZmllciwgZGF0YVNldCkge1xuICAgICAgICB0aGlzLiNyb290RWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocGFyZW50SWRlbnRpZmllcik7XG4gICAgICAgIHRoaXMuI2RhdGFTZXQgPSBkYXRhU2V0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhc3luYyByZW5kZXIoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy4jcm9vdEVsZW0uaW5uZXJIVE1MID0gJyc7XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlZCwgcmVqZWN0ZWQpID0+IHtcbiAgICAgICAgICAgIGZvcihsZXQgb2JqIG9mIHRoaXMuI2RhdGFTZXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiNyb290RWxlbS5pbm5lckhUTUwgKz0gY2FsbGJhY2sob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZWQoKSwgMTAwKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVmlvbGF0ZXMgdGhlIHNpbmdsZSByZXNwb25zaWJpbGl0eSBwcmluY2lwbGVcbiAgICAvLyBUaGlzIG1ldGhvZCBpcyBwZXJmb3JtaW5nIHR3byB0aGluZ3NcblxuICAgIC8vIHBvc3NpYmxlIHN1bHV0aW9uIHRvIGRlY291cGxlIGZ1cnRoZXIgd291bGQgYmUgdG8gc2VwZXJhdGVcbiAgICAvLyByZW5kZXJlciBmcm9tIGVsZW1lbnQgbW9kaWZpZXIgKG1vZGlmaWVyIGluY2x1ZGVzIGV2ZW50IGFkZGluZylcbiAgICBhZnRlclJlbmRlcihjYWxsYmFjaykge1xuICAgICAgICBsZXQgaW5uZXJQcm9ncmVzc0JhciwgcGVyY2VudDtcblxuICAgICAgICBmb3IobGV0IHJvdXRlRWxlbSBvZiB0aGlzLiNyb290RWxlbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdyb3V0ZScpKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByb3V0ZUVsZW0gJiYgcm91dGVFbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7IGNhbGxiYWNrKHRoaXMpOyB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGVyY2VudCA9IHJvdXRlRWxlbS5xdWVyeVNlbGVjdG9yKCcucHJvZ3Jlc3MtcGVyY2VudCcpLmlubmVySFRNTDtcbiAgICAgICAgICAgIGlubmVyUHJvZ3Jlc3NCYXIgPSByb3V0ZUVsZW0ucXVlcnlTZWxlY3RvcignLmlubmVyLXByb2dyZXNzLWJhcicpO1xuICAgICAgICAgICAgaW5uZXJQcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHBlcmNlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJlciA9IG5ldyBSZW5kZXJlcigpOyIsImNsYXNzIEh0dHBIYW5kbGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgZ2V0UGFyYW1ldGVycygpIHtcbiAgICAgICAgbGV0IHBhcmFtZXRlcnMgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIHJldHVybiBgPyR7IHBhcmFtZXRlcnMgfWA7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QXN5bmModXJsKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBmZXRjaCh1cmwpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGh0dHBIYW5kbGVyID0gbmV3IEh0dHBIYW5kbGVyKCk7IiwiaW1wb3J0IHsgbW9kYWxCZyB9IGZyb20gJy4vbW9kYWwtYmcvbW9kYWwtYmcnO1xuaW1wb3J0IHsgcm91dGVEZXRhaWxzIH0gZnJvbSAnLi9yb3V0ZS1kZXRhaWxzL3JvdXRlLWRldGFpbHMnO1xuaW1wb3J0IHsgc3RvcmUgfSBmcm9tICcuL2NvcmUvc3RvcmUnO1xuaW1wb3J0IHsgcmVuZGVyZXIgfSBmcm9tICcuL2NvcmUvcmVuZGVyZXInO1xuaW1wb3J0IHsgaHR0cEhhbmRsZXIgfSBmcm9tICcuL2NvcmUvaHR0cEhhbmRsZXInO1xuXG5jb25zdCBhcHAgPSAoKCkgPT4ge1xuICAgIGNsYXNzIEFwcCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICAgICAgcnVuKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBydW4gb24gd2luZG93IGxvYWRcbiAgICAgICAgICAgIHdpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEFwcCgpO1xufSkoKTtcblxubW9kYWxCZy5pbml0KFtcbiAgICAoKSA9PiByb3V0ZURldGFpbHMuaGlkZSgpXSk7XG5cbnJvdXRlRGV0YWlscy5jbG9zZUJ0bi5pbml0KFtcbiAgICAoKSA9PiBtb2RhbEJnLmhpZGUoKSxcbiAgICAoKSA9PiByb3V0ZURldGFpbHMuaGlkZSgpXSk7XG5cbmFwcC5ydW4oKCkgPT4ge1xuICAgIC8vIEV4YW1wbGU6IGh0dHA6Ly9pcF9vcl9kb21haW5OYW1lOnBvcnQvXG4gICAgY29uc3QgZG9tYWluID0gJy4vYXNzZXRzL2pzb25fZGF0YXNldC5qc29uJztcbiAgICAvLyBkbyBub3QgY2hhbmdlXG4gICAgY29uc3QgYXBpVXJpID0gZG9tYWluICsgaHR0cEhhbmRsZXIuZ2V0UGFyYW1ldGVycygpO1xuXG4gICAgaHR0cEhhbmRsZXIuZ2V0QXN5bmMoIGFwaVVyaSApLnRoZW4oKHJlc3BvbnNlRGF0YSkgPT4ge1xuICAgICAgICBcbiAgICAgICAgc3RvcmUubG9hZCggcmVzcG9uc2VEYXRhICk7XG4gICAgICAgIHN0b3JlLnNvcnRCeU9yZGVyTnVtKCk7XG4gICAgICAgIGNvbnN0IGluaXRpYWxEYXRhc2V0ID0gc3RvcmUuZ2V0Qm9yb3VnaHNXaXRoVW5pcXVlUm91dGVzKCk7XG4gICAgICAgIFxuICAgICAgICByZW5kZXJlclxuICAgICAgICAgICAgLmluaXQoJy5ib3JvdWdoLWNvbnRhaW5lcicsIGluaXRpYWxEYXRhc2V0KVxuICAgICAgICAgICAgLnJlbmRlcihvYmogPT4gb2JqLnRlbXBsYXRlKCkpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVuZGVyZXJcbiAgICAgICAgICAgICAgICAgICAgLmFmdGVyUmVuZGVyKGVsZW0gPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3V0ZXMgPSBzdG9yZS5nZXRSb3V0ZXNCeU5hbWUoZWxlbS5pZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmluaXQoJy5yb3V0ZS1kZXRhaWwnLCByb3V0ZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbmRlcihvYmogPT4gb2JqLnRlbXBsYXRlKCdlcXVpcG1lbnRfaWQnLCAncGN0Y29tcF9zcGVjaWZpYycpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIuYWZ0ZXJSZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVEZXRhaWxzLnNlbGVjdGVkUm91dGUuZWxlbWVudC50ZXh0Q29udGVudCA9IHJvdXRlc1swXS5mdWxsTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm91dGVEZXRhaWxzLnNob3coKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxCZy5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJBcnRpZmFjdCIsImV4ZWN1dGFibGVzIiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwidGhpcyIsIkVycm9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIndyaXRhYmxlIiwiRGlzcGxheWVyIiwic3VwZXIiLCJfc2hvdyIsImNsYXNzTGlzdCIsInJlbW92ZSIsIl9oaWRlIiwiYWRkIiwibW9kYWxCZyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJoaWRlIiwiaW5pdCIsInNob3ciLCJtYXAiLCJ4IiwiU2xpZGVyIiwid2lkdGgiLCJzdHlsZSIsInJvdXRlRGV0YWlscyIsInNlbGVjdGVkUm91dGUiLCJjbG9zZUJ0biIsImdldEVsZW1lbnRCeUlkIiwiYm9yb3VnaE1hcHBpbmciLCJNQiIsIm5hbWUiLCJvcmRlck51bSIsIkJRIiwiU0kiLCJyb3V0ZU1hcHBpbmciLCJCUV85OV9SSF9IMTAxIiwiTUJfOTlfUkhfSDEwMSIsIkJRXzk5X1JIX0gxMDIiLCJNQl85OV9SSF9IMTAyIiwiQlFfOTlfUkhfSDEwMyIsIk1CXzk5X1JIX0gxMDMiLCJCUV85OV9SSF9IMTA0IiwiU0lfOTlfUkhfSDEwMSIsIk1CXzk5X1JIX0gxMDQiLCJCUV85OV9SSF9IMTA1IiwiQlFfOTlfUkhfSDEwNiIsIk1CXzk5X1JIX0gxMDUiLCJNQl85OV9SSF9IMTA2IiwiTUJfOTlfUkhfSDEwNyIsIkJRXzk5X1JIX0gxMDciLCJTSV85OV9SSF9IMTAyIiwiQlFfOTlfUkhfSDEwOCIsIk1CXzk5X1JIX0gxMDgiLCJNQl85OV9SSF9IMTA5IiwiQlFfOTlfUkhfSDEwOSIsIk1CXzk5X1JIX0gxMTAiLCJCUV85OV9SSF9IMTEwIiwiTUJfOTlfUkhfSDExMSIsIlNJXzk5X1JIX0gxMDMiLCJCUV85OV9SSF9IMTExIiwiU0lfOTlfUkhfSDEwNCIsImZhY3RvcnkiLCJjbGFzc2VzT2JqIiwiYXNzaWduIiwiY3JlYXRlIiwiY2xhc3NOYW1lIiwicGFyYW1ldGVycyIsIlJvdXRlIiwicm91dGUiLCJmdWxsTmFtZSIsInJvdXRlX25hbWUiLCJ0ZW1wbGF0ZSIsImxhYmVsUHJvcE5hbWUiLCJwZXJjZW50UHJvcE5hbWUiLCJwZXJjZW50IiwiY2FsY1BlcmNlbnQiLCJNYXRoIiwiYWJzIiwiZXZhbENsYXNzIiwidG9GaXhlZCIsIkJvcm91Z2giLCJib3JvdWdoU2hvcnROYW1lIiwic2hvcnROYW1lIiwicm91dGVzIiwicm91dGVIdG1sIiwidG9Mb3dlckNhc2UiLCJzdG9yZSIsIlNldCIsImJvcm91Z2giLCJ1bmlxdWVCb3JvdWdoTmFtZXMiLCJsb2FkIiwiZGF0YSIsInNvcnRCeU9yZGVyTnVtIiwic29ydCIsImEiLCJiIiwiZ2V0Qm9yb3VnaHNXaXRoVW5pcXVlUm91dGVzIiwidW5pcXVlUm91dGVzIiwidW5pcXVlUm91dGVOYW1lcyIsImhhcyIsInB1c2giLCJmaWx0ZXIiLCJnZXRSb3V0ZXNCeU5hbWUiLCJyb3V0ZU5hbWUiLCJyZW5kZXJlciIsInBhcmVudElkZW50aWZpZXIiLCJkYXRhU2V0IiwiYXN5bmMiLCJjYWxsYmFjayIsImlubmVySFRNTCIsIlByb21pc2UiLCJyZXNvbHZlZCIsInJlamVjdGVkIiwib2JqIiwic2V0VGltZW91dCIsImFmdGVyUmVuZGVyIiwiaW5uZXJQcm9ncmVzc0JhciIsInJvdXRlRWxlbSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJodHRwSGFuZGxlciIsImdldFBhcmFtZXRlcnMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJzdWJzdHJpbmciLCJ1cmwiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJhcHAiLCJydW4iLCJvbmxvYWQiLCJhcGlVcmkiLCJnZXRBc3luYyIsInJlc3BvbnNlRGF0YSIsImluaXRpYWxEYXRhc2V0IiwicmVuZGVyIiwiZWxlbSIsImlkIiwidGV4dENvbnRlbnQiXSwic291cmNlUm9vdCI6IiJ9